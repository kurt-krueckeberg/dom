#!/usr/bin/env php
<?php
declare(strict_types = 1);
use App\File\FileReadIterator;

include 'boot-strap/boot-strap.php';
boot_strap();

//require_once "./headers.php";

class HtmlWriter {

   private $ofile;
   private $defile;
   private $enfile;
   private static $regex = "/^(.+)\s:\s(.*)$/U"; // With the non-ngreedy modifier U, the first  " : " will match. 

   private static $two_cols_header = <<<TWOCOLSHEADER
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title></title>
	<meta name="generator" content="LibreOffice 7.1.6.2 (Linux)"/>
	<meta name="created" content="00:00:00"/>
	<meta name="changed" content="2021-08-15T18:53:02.053049428"/>
<style>
#container {
   display: grid; 
   grid-template-columns: 40% 40%; 
   padding-left: 2em;
}

p { 
  padding-top: 3px;
  padding-bottom: 3px;
  padding-right: 6px;
  margin: 0px;
}

p.new-speaker {
  font-weight: 600;
  /*font-style: italic;*/
}

body {
  font-family: 'Lato Medium', Arial, sans-serif;
  margin-left: 3em;
 /*
  background-color: #333;
  color: #f2f2f2;
 */
  background-color: #171421;
  color: #D0CFCC;
}
</style>
</head>
<body>
<div id="container">
TWOCOLSHEADER;

	private static $one_col_header = <<<ONECOLHEADER
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title></title>
	<meta name="generator" content="LibreOffice 7.1.6.2 (Linux)"/>
	<meta name="created" content="00:00:00"/>
	<meta name="changed" content="2021-08-15T18:53:02.053049428"/>
<style>
body {
  font-family: 'Lato Medium', Arial, sans-serif;
  margin-left: 2em;
}

#container {
}

p { 
  padding-top: 3px;
  padding-bottom: 3px;
  padding-right: 6px;
  margin: 0px;
}

p.new-speaker {
  font-weight: 600;
  font-style: italic;
}
body {

  font-family: 'Lato Medium', Arial, sans-serif;
  margin-left: 3em;
 /*
  background-color: #333;
  color: #f2f2f2;
 */
  background-color: #171421
  color: #D0CFCC;
}
</style>
</head>
<body>
<div id="grid-col">
ONECOLHEADER;

	private static $footer = <<<FOOTER
</div>
</body>
</html>
FOOTER;
 
   private function write(string $text)
   {
    $rc = preg_match(self::$regex, $text, $matches);

    if ($rc === 1) {
        
        if ($matches[1][0] == '-') {
             
            $par = "<p class='new-speaker'>"; 
            $matches[1] = substr($matches[1], 2);

            if ($matches[2][0] == '-') // When the German string starts with a dash followed by a blank ("- "), the English sometimes doesn't so check.
                $matches[2] = substr($matches[2], 2); 
            
        } else 

           $par = '<p>';
         
        fwrite($this->ofile, "{$par}$matches[1]</p>{$par}$matches[2]</p>\n");                

        fwrite($this->deFile, "{$par}$matches[1]</p>\n");                

        fwrite($this->enFile, "{$par}$matches[2]</p>\n");                
     
    } else

        throw new \ErrorException("Fatal Error: Colon not found in paragraph with text of:\n$text\n");
   }

   public function __invoke(string $text)
   {
      $this->write($text);
   }

   public function __construct($outfile)
   { 
     $this->ofile  = fopen($outfile, "w");

     fwrite($this->ofile, self::$two_cols_header);
   
     $this->deFile = fopen('de-' . $outfile, "w");
     fwrite($this->deFile, self::$one_col_header);

     $this->enFile = fopen('en-'.  $outfile, "w");
     fwrite($this->enFile, self::$one_col_header);

   } 

   public function __destruct()
   {   
      fwrite($this->ofile, self::$footer . "\n");
      fwrite($this->deFile, self::$footer . "\n");
      fwrite($this->enFile, self::$footer . "\n");
   }
}

if ($argc != 3) {
   echo "Enter both the name of input file followed by the name of the output file.\n";
   return;
}

$infile = $argv[1];
$outfile = $argv[2];

  try {
     
     $ifile = new FileReadIterator($infile, "r");
     $writer = new HtmlWriter($outfile);

     foreach($ifile as $text) $writer($text);

   } catch(\Exception $e)  {
     
        echo 'Caught Exception: ' . $e->getMessage() . ". Occurred at line: " . $e->getLine() . "\n";
  }
  
