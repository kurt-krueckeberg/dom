@startuml

class DOMNode {
  +readonly nodeName : string
  +nodeValue : string | null;
  +readonly nodeType : int 
  +readonly parentNode : null | DOMNode
  +readonly childNodes : DOMNodeList
  +readonly firstChild : null | DOMNode
  +readonly lastChild : null | DOMNode
  +readonly previousSibling : null | DOMNode
  +readonly nextSibling : null | DOMNode
  +readonly attributes : null | DOMNamedNodeMap
  +readonly ownerDocument : null | DOMDocument
  +readonly namespaceURI : null | string
  +prefix : string;
  +readonly localName : null | string
  +readonly baseURI : null | string
  +string textContent;
  +appendChild(node :  DOMNode) : DOMNode | false
  +C14N(bool exclusive = false, bool withComments = false,  null | array xpath = null, nsPrefixes = null : null | array) : string | false
  +C14NFile(
    string uri,
    bool exclusive = false,
    bool withComments = false,
    null | array xpath = null,
    null | array nsPrefixes = null) : int | false
  +cloneNode(deep = false :  bool) : DOMNode | false
  +getLineNo() : int
  +getNodePath() : null | string
  +hasAttributes() : bool
  +hasChildNodes() : bool
  +insertBefore(node :  DOMNode, child = null : null | DOMNode) : DOMNode | false
  +isDefaultNamespace(namespace :  string) : bool
  +isSameNode(otherNode :  DOMNode) : bool
  +isSupported(feature :  string, version : string) : bool
  +lookupNamespaceUri(prefix :  string) : string
  +lookupPrefix(namespace :  string) : null | string
  +normalize() : void
  +removeChild(child :  DOMNode) : DOMNode | false
  +replaceChild(node :  DOMNode, child : DOMNode) : DOMNode | false
}
@enduml
