#!/usr/bin/env php
<?php
declare(strict_types = 1);

use \SplFileObject as File;

/*
 *
 * Writes html files with each line of German and English enclosed within html paragraphs.
 * Adds inline CSS with the <header>, so that the German and English appear in side-by-side columns
 *
 */
class HtmlWriter {

   private $file_name;
   private $ofile;
   private static $regex = "/^(.+)\s#\s(.*)$/U"; // With the non-ngreedy modifier U, the first  " : " will match. 

   private static $two_cols_header = <<<TWOCOLSHEADER
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title></title>
	<meta name="generator" content="LibreOffice 7.1.6.2 (Linux)"/>
<style>
#container {
   display: grid; 
   grid-template-columns: 40% 40%; 
   padding-left: 2em;
}

p { 
  padding-top: 3px;
  padding-bottom: 3px;
  padding-right: 6px;
  margin: 0px;
}

p.new-speaker {
  font-weight: 600;
}

body {
  font-family: 'Lato Medium', Arial, sans-serif;
  margin-left: 3em;
  background-color: #171421;
  color: #D0CFCC;
}
</style>
</head>
<body>
<div id="container">
TWOCOLSHEADER;

	private static $one_col_header = <<<ONECOLHEADER
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title></title>
<style>
body {
  font-family: 'Lato Medium', Arial, sans-serif;
  margin-left: 2em;
}

#container {
}

p { 
  padding-top: 3px;
  padding-bottom: 3px;
  padding-right: 6px;
  margin: 0px;
}

p.new-speaker {
  font-weight: 600;
  font-style: italic;
}
body {

  font-family: 'Lato Medium', Arial, sans-serif;
  margin-left: 3em;
  background-color: #171421;
  color: #D0CFCC;
}
</style>
</head>
<body>
<div id="grid-col">
ONECOLHEADER;

	private static $footer = <<<FOOTER
</div>
</body>
</html>
FOOTER;
 
   private function write(string $text)
   {
      $rc = preg_match(self::$regex, $text, $matches);

      if ($rc === 1) {
        
        $par = '<p>';
         
        fwrite($this->ofile, "{$par}$matches[1]</p>{$par}$matches[2]</p>\n");                
     
      } else {

        $fname = $this->file_name . ".txt";

        throw new \ErrorException("Fatal Error: Colon not found in $fname one line paragraph with text of:\t{$text}\n");
     }
   }

   public function __invoke(string $text)
   {
      $this->write($text);
   }

   public function __construct($outfile)
   { 
     echo $outfile . "\n"; 
     $this->file_name = substr($outfile, 0, strpos($outfile, "."));

     echo "THE file_name is " . $this->file_name . "\n";

     $this->ofile  = fopen($outfile, "w");

     fwrite($this->ofile, self::$two_cols_header);
   } 

   public function __destruct()
   {   
      fwrite($this->ofile, self::$footer . "\n");
   }
}

if ($argc != 2) {
   echo "Enter the name of input file.\n";
   return;
}

$infile = $argv[1];

$outfile = substr($argv[1], 0, strpos($argv[1], ".")) . ".html";

  try {
     
     $ifile = new File($infile , "r");

     $ifile->setFlags(\SplFileObject::READ_AHEAD | \SplFileObject::SKIP_EMPTY | \SplFileObject::DROP_NEW_LINE);
  
     $writer = new HtmlWriter($outfile);

     foreach($ifile as $text) $writer($text);

   } catch(\Exception $e)  {
     
        echo 'Caught Exception: ' . $e->getMessage() . ". Occurred at line: " . $e->getLine() . "\n";
  }

// exec("cp ./text.txt ./*wunder.html /home/kurt/php-util/"); 
// exec("mv ./*wunder.html ../");
